{"version":3,"sources":["Calculations.js","Display.js","Button.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculations","this","number","previousInput","previousNumber","previousOperation","repeatNumber","repeatOperation","clearable","OperationEnum","addition","subtraction","multiplication","division","percentage","sign","equal","allClear","clear","input","isOperation","containDecimalPoint","removeZero","handleBaiscMathOperation","handlePercentageOperation","handleSignOperation","handleAllClearOperation","handleClearOperation","handleEqualOperation","updatePreviousStatus","temp","add","subtract","muliply","divide","changeSign","operation","perform","isDigit","handleDigitInput","handleOperationInput","isNaN","Object","values","includes","parseFloat","toString","length","substr","Display","props","state","display","width","window","divRef","React","createRef","spanRef","previousWidth","console","log","ref","className","divWidth","current","clientWidth","Component","Button","onClick","bind","value","Calculator","engine","handleButtonClick","setState","calculate","class","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d38f9f75.chunk.js","sourcesContent":["class Calculations {\n  constructor() {\n    this.number = \"\";\n\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n\n    this.OperationEnum = {\n      addition: \"+\",\n      subtraction: \"-\",\n      multiplication: \"x\",\n      division: \"\\u00F7\",\n      percentage: \"%\",\n      sign: \"+/-\",\n      equal: \"=\",\n      allClear: \"AC\",\n      clear: \"C\",\n    };\n  }\n\n  updatePreviousStatus(number, input) {\n    this.previousNumber = number;\n    this.previousInput = input;\n    this.previousOperation = input;\n    \n  }\n\n  \n  handleDigitInput(input) {\n    this.clearable = true;\n\n    if (this.isOperation(this.previousInput)) {\n      this.number = \"\";\n    }\n\n    if (input === \".\" && this.containDecimalPoint(this.number)) {\n      return this.number;\n    }\n\n    if (input === \".\" && this.number === \"\") {\n      this.number = \"0.\";\n      return this.number;\n    }\n\n    this.number += input;\n\n    this.previousInput = input;\n\n    return this.removeZero(this.number);\n  }\n\n  \n  handleOperationInput(input) {\n    if (\n      input === this.OperationEnum.addition ||\n      input === this.OperationEnum.subtraction ||\n      input === this.OperationEnum.multiplication ||\n      input === this.OperationEnum.division\n    ) {\n      return this.handleBaiscMathOperation(input);\n    }\n\n    if (input === this.OperationEnum.percentage) {\n      return this.handlePercentageOperation();\n    }\n\n    if (input === this.OperationEnum.sign) {\n      return this.handleSignOperation();\n    }\n\n    if (input === this.OperationEnum.allClear) {\n      return this.handleAllClearOperation();\n    }\n\n    if (input === this.OperationEnum.clear) {\n      return this.handleClearOperation();\n    }\n\n    if (input === this.OperationEnum.equal) {\n      return this.handleEqualOperation(input);\n    }\n  }\n\n  \n  handleBaiscMathOperation(input) {\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n\n    if (this.previousNumber == null) {\n      this.updatePreviousStatus(this.number, input);\n\n      return this.number;\n    } else {\n      let temp = this.previousInput;\n      this.previousInput = input;\n\n      if (\n        temp !== input &&\n        this.previousOperation !== this.OperationEnum.equal &&\n        temp !== \"=\"\n      ) {\n        if (this.previousOperation === this.OperationEnum.addition) {\n          this.number = this.add(this.previousNumber, this.number);\n        }\n        if (this.previousOperation === this.OperationEnum.subtraction) {\n          this.number = this.subtract(this.previousNumber, this.number);\n        }\n        if (this.previousOperation === this.OperationEnum.multiplication) {\n          this.number = this.muliply(this.previousNumber, this.number);\n        }\n        if (this.previousOperation === this.OperationEnum.division) {\n          this.number = this.divide(this.previousNumber, this.number);\n        }\n\n        this.updatePreviousStatus(this.number, input);\n\n        return this.number;\n      } else {\n        this.updatePreviousStatus(this.number, input);\n\n        return this.number;\n      }\n    }\n  }\n\n  handlePercentageOperation() {\n    if (this.number === \"\") {\n      this.number = \"0\";\n    }\n\n    this.number = this.percentage(this.number);\n\n    return this.number;\n  }\n\n  handleSignOperation() {\n    if (this.number === \"\") {\n      this.number = \"0\";\n    }\n\n    this.number = this.changeSign(this.number);\n\n    return this.number;\n  }\n\n  handleAllClearOperation() {\n    return this.allClear();\n  }\n\n  handleClearOperation() {\n    return this.clear();\n  }\n\n  \n  perform(operation) {\n    if (this.repeatNumber !== null) {\n      this.number = operation(this.number, this.repeatNumber);\n    } else {\n      this.repeatNumber = this.number;\n      this.number = operation(this.previousNumber, this.number);\n    }\n  }\n\n  handleEqualOperation(input) {\n    if (this.previousNumber == null) {\n      this.updatePreviousStatus(this.number, input);\n\n      return this.number;\n    } else {\n      this.previousInput = input;\n\n      if (\n        this.previousOperation !== this.OperationEnum.equal &&\n        input === this.OperationEnum.equal\n      ) {\n        let temp = this.number;\n\n        if (this.previousOperation === this.OperationEnum.addition) {\n          this.perform(this.add);\n        }\n        if (this.previousOperation === this.OperationEnum.subtraction) {\n          this.perform(this.subtract);\n        }\n        if (this.previousOperation === this.OperationEnum.multiplication) {\n          this.perform(this.muliply);\n        }\n        if (this.previousOperation === this.OperationEnum.division) {\n          this.perform(this.divide);\n        }\n\n        this.repeatNumber = temp;\n        this.repeatOperation = this.previousOperation;\n        this.previousInput = input;\n        this.previousOperation = input;\n\n        return this.number;\n      } else {\n        let temp = this.number;\n\n        if (this.repeatNumber != null) {\n          if (this.repeatOperation === this.OperationEnum.addition) {\n            this.number = this.add(this.number, this.repeatNumber);\n          }\n          if (this.repeatOperation === this.OperationEnum.subtraction) {\n            this.number = this.subtract(this.number, this.repeatNumber);\n          }\n          if (this.repeatOperation === this.OperationEnum.multiplication) {\n            this.number = this.muliply(this.number, this.repeatNumber);\n          }\n          if (this.repeatOperation === this.OperationEnum.division) {\n            this.number = this.divide(this.number, this.repeatNumber);\n          }\n        }\n\n        this.updatePreviousStatus(temp, input);\n\n        return this.number;\n      }\n    }\n  }\n\n  calculate(input) {\n    if (this.isDigit(input)) {\n      return this.handleDigitInput(input);\n    }\n\n    if (this.isOperation(input)) {\n      return this.handleOperationInput(input);\n    }\n\n    return \"Error\";\n  }\n\n  isDigit(input) {\n    return !isNaN(input) || input === \".\";\n  }\n\n  isOperation(input) {\n    return Object.values(this.OperationEnum).includes(input);\n  }\n\n  add(previousNumber, number) {\n    return (parseFloat(previousNumber) + parseFloat(number)).toString();\n  }\n\n  subtract(previousNumber, number) {\n    return (parseFloat(previousNumber) - parseFloat(number)).toString();\n  }\n\n  muliply(previousNumber, number) {\n    return (parseFloat(previousNumber) * parseFloat(number)).toString();\n  }\n\n  divide(previousNumber, number) {\n    return (parseFloat(previousNumber) / parseFloat(number)).toString();\n  }\n\n  percentage(number) {\n    return (parseFloat(number) / 100).toString();\n  }\n\n  changeSign(number) {\n    return parseFloat(number) === 0\n      ? \"0\"\n      : (parseFloat(number) * -1).toString();\n  }\n\n  clear() {\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n\n    return this.number;\n  }\n\n  allClear() {\n    this.number = \"\";\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n\n    return \"0\";\n  }\n\n  removeZero(number) {\n    if (number.length > 1 && number[0] === \"0\" && number[1] !== \".\") {\n      return this.removeZero(number.substr(1, number.length));\n    }\n\n    return number;\n  }\n\n  containDecimalPoint(number) {\n    return number.includes(\".\");\n  }\n}\n\nexport default Calculations;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Display.css\";\n\nclass Display extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = { display: props.display, width: window.width };\n\n    this.divRef = React.createRef();\n    this.spanRef = React.createRef();\n\n    this.previousWidth = window.width;\n    console.log(this.previousWidth);\n  }\n\n\n  render() {\n    return (\n      <div ref={this.divRef} className=\"Display\">\n      \n        <span ref={this.spanRef} className=\"DisplaySpan\">\n          {this.props.display}\n        </span>\n      </div>\n    );\n  }\n\n  componentDidUpdate() {\n    let divWidth = this.divRef.current.clientWidth;\n    this.previousWidth = divWidth;\n  }\n}\n\nDisplay.propTypes = {\n  display: PropTypes.string,\n};\n\nexport default Display;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Button.css\";\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <button\n        className={this.props.className}\n        onClick={this.props.onClick.bind(null, this.props.value)}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  value: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Button;\n","import React from \"react\";\nimport Calculations from \"./Calculations.js\";\nimport Display from \"./Display.js\";\nimport Button from \"./Button.js\";\nimport \"./Calculator.css\";\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      display: \"0\",\n      engine: new Calculations(),\n    };\n\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleButtonClick(value) {\n    this.setState({\n      display: this.state.engine.calculate(value),\n      \n    });\n  }\n\n  render() {\n    return (\n      <>\n      <div class=\"container\">\n        <div class=\"calc-body\">\n          <div class=\"calc-screen\">\n          <Display class=\"calc-operation\" display={this.state.display} />\n          </div>\n        \n\n        <div class=\"calc-button-row\">\n        <Button\n          value={this.state.engine.clearable ? \"C\" : \"AC\"}\n          className=\"Button WhiteButton\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"+/-\"\n          className=\"Button WhiteButton\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"%\"\n          className=\"Button WhiteButton\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value={\"\\u00F7\"}\n          className=\"Button BlueButton\"\n          onClick={this.handleButtonClick}\n        />\n\n        </div>\n\n        <div class=\"calc-button-row\">\n        <Button\n          value=\"7\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"8\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"9\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"x\"\n          className=\"Button BlueButton\"\n          onClick={this.handleButtonClick}\n        />\n        </div>\n\n        <div class=\"calc-button-row\">\n        <Button\n          value=\"4\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"5\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"6\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"-\"\n          className=\"Button BlueButton\"\n          onClick={this.handleButtonClick}\n        />\n        </div>\n\n        <div class=\"calc-button-row\">\n        <Button\n          value=\"1\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"2\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"3\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"+\"\n          className=\"Button BlueButton\"\n          onClick={this.handleButtonClick}\n        />\n        </div>\n\n        <div class=\"calc-button-row\">\n        <Button\n          value=\"0\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\".\"\n          className=\"Button\"\n          onClick={this.handleButtonClick}\n        />\n        <Button\n          value=\"=\"\n          className=\"Button BlueButton LargeButton\"\n          onClick={this.handleButtonClick}\n        />\n        </div>\n      </div>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\n\nimport Calculator from \"./Calculator.js\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}